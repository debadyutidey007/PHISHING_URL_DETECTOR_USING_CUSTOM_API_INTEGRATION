{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/phishing-url-detector.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview This file implements a Genkit flow for detecting phishing URLs.\n *\n * The flow accepts a URL as input and returns a prediction indicating whether the URL is phishing or legitimate,\n * along with a confidence score and a highly detailed analysis report.\n *\n * @exports phishingUrlDetector - The main function to detect phishing URLs.\n * @exports PhishingUrlDetectorInput - The input type for the phishingUrlDetector function.\n * @exports PhishingUrlDetectorOutput - The output type for the phishingUrlDetector function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PhishingUrlDetectorInputSchema = z.object({\n  url: z.string().describe('The URL to check for phishing.'),\n});\nexport type PhishingUrlDetectorInput = z.infer<typeof PhishingUrlDetectorInputSchema>;\n\nconst PhishingUrlDetectorOutputSchema = z.object({\n  prediction: z.enum(['phishing', 'legitimate']).describe('The final verdict on whether the URL is phishing or legitimate.'),\n  confidenceScore: z.number().min(0).max(1).describe('The confidence score of the prediction (0-1).'),\n  overallAssessment: z.string().describe(\"A concise, one-sentence summary of the findings.\"),\n  \n  threatCategorization: z.object({\n      category: z.enum(['Credential Harvesting', 'Malware Delivery', 'Social Engineering', 'Financial Scam', 'Benign']).describe(\"The specific type of threat identified.\"),\n      description: z.string().describe(\"A detailed explanation of the threat category and why this URL fits into it.\"),\n  }).describe(\"Categorization of the detected threat.\"),\n\n  detailedAnalysis: z.object({\n      domainAnalysis: z.string().describe(\"In-depth analysis of the domain, including age (heuristic), TLD, and similarities to legitimate domains.\"),\n      subdomainAnalysis: z.string().describe(\"Examination of subdomains for suspicious patterns like brand impersonation or excessive length.\"),\n      pathAnalysis: z.string().describe(\"Scrutiny of the URL path for red flags like '.exe' or attempts to look like a legitimate login page.\"),\n      characterAnalysis: z.string().describe(\"Analysis of URL characters for suspicious patterns (e.g., excessive hyphens, special characters, Punycode).\"),\n  }).describe(\"A breakdown of the URL's components.\"),\n  \n  securityChecklist: z.object({\n    usesHttps: z.object({\n      value: z.boolean(),\n      assessment: z.string().describe(\"Assessment of whether the site uses HTTPS and the implications.\"),\n    }).describe(\"Checks for HTTPS encryption.\"),\n    sslCertificate: z.object({\n      valid: z.boolean(),\n      assessment: z.string().describe(\"Analysis of the SSL certificate's validity and trustworthiness (simulated).\"),\n    }).describe(\"Checks the SSL certificate status.\"),\n    domainReputation: z.object({\n      status: z.enum(['good', 'neutral', 'poor', 'unknown']),\n      assessment: z.string().describe(\"Assessment of the domain's reputation based on public blacklists and historical data (simulated).\"),\n    }).describe(\"Evaluates the domain's reputation.\"),\n  }).describe(\"A checklist of critical security indicators.\"),\n\n  actionableRecommendations: z.object({\n    userAction: z.enum(['Do Not Proceed', 'Proceed with Caution', 'Safe to Proceed']).describe(\"The recommended course of action for the user.\"),\n    securityTip: z.string().describe(\"A practical security tip for the user based on the analysis.\"),\n  }).describe(\"Provides clear guidance for the user.\"),\n\n});\nexport type PhishingUrlDetectorOutput = z.infer<typeof PhishingUrlDetectorOutputSchema>;\n\nexport async function phishingUrlDetector(input: PhishingUrlDetectorInput): Promise<PhishingUrlDetectorOutput> {\n  return phishingUrlDetectorFlow(input);\n}\n\nconst detectPhishingPrompt = ai.definePrompt({\n  name: 'detectPhishingPrompt',\n  input: {schema: PhishingUrlDetectorInputSchema},\n  output: {schema: PhishingUrlDetectorOutputSchema},\n  prompt: `You are a world-class cybersecurity analyst AI, specializing in the forensic analysis of URLs to detect sophisticated phishing attempts. Your analysis must be exceptionally detailed, providing deep insights and actionable advice.\n\nAnalyze the URL: {{{url}}}\n\nBased on your comprehensive analysis, generate a structured JSON output with the following highly detailed fields:\n\n- **prediction**: Your final verdict (\"phishing\" or \"legitimate\").\n- **confidenceScore**: A score from 0.0 to 1.0 representing your confidence.\n- **overallAssessment**: A concise, one-sentence executive summary of your findings.\n- **threatCategorization**:\n  - **category**: Classify the threat ('Credential Harvesting', 'Malware Delivery', 'Social Engineering', 'Financial Scam', or 'Benign').\n  - **description**: Provide a detailed explanation of this threat type and the specific evidence within the URL that supports your classification.\n- **detailedAnalysis**:\n  - **domainAnalysis**: Analyze the main domain. Comment on its likely age (is it a newly registered domain?), the TLD's common usage, and any subtle misspellings or impersonations of well-known brands.\n  - **subdomainAnalysis**: Scrutinize all subdomains. Look for brand names, random character strings, or excessive subdomains designed to obscure the true domain.\n  - **pathAnalysis**: Examine the URL path. Look for suspicious file extensions (e.g., .zip, .exe), directory names that mimic legitimate services ('/login/', '/account/verify/'), or long, obfuscated paths.\n  - **characterAnalysis**: Analyze the URL for Punycode (IDN homograph attacks), excessive use of hyphens or dots, and the presence of special characters used to deceive users.\n- **securityChecklist**:\n  - **usesHttps**:\n    - **value**: boolean (true if HTTPS is used, false otherwise).\n    - **assessment**: Explain the significance of HTTPS (or its absence) for this specific URL. Note that HTTPS does not guarantee safety.\n  - **sslCertificate**:\n    - **valid**: boolean (simulate this check; assume true for HTTPS sites unless other factors are highly suspicious).\n    - **assessment**: Briefly assess the SSL certificate's role in trust. Mention if a phishing site can still have a valid certificate.\n  - **domainReputation**:\n    - **status**: 'good', 'neutral', 'poor', or 'unknown' (simulate this check based on URL patterns).\n    - **assessment**: Provide a judgment on the domain's reputation, explaining what factors led to this conclusion.\n- **actionableRecommendations**:\n  - **userAction**: Your explicit advice: 'Do Not Proceed', 'Proceed with Caution', or 'Safe to Proceed'.\n  - **securityTip**: Offer a relevant, practical security tip that educates the user based on the findings (e.g., \"Always verify the sender before clicking links in emails.\").\n`,\n});\n\nconst phishingUrlDetectorFlow = ai.defineFlow(\n  {\n    name: 'phishingUrlDetectorFlow',\n    inputSchema: PhishingUrlDetectorInputSchema,\n    outputSchema: PhishingUrlDetectorOutputSchema,\n  },\n  async input => {\n    const {output} = await detectPhishingPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { phishingUrlDetector, PhishingUrlDetectorOutput } from '@/ai/flows/phishing-url-detector';\nimport { z } from 'zod';\n\nconst formSchema = z.object({\n  url: z.string({\n    required_error: \"URL is required.\",\n  }).url(\"Please enter a valid URL.\"),\n  apiKey: z.string().min(1, \"API Key is required.\"), // For simulation\n});\n\nexport type FormState = {\n  result?: PhishingUrlDetectorOutput;\n  error?: string;\n  success: boolean;\n  message?: string;\n  url?: string;\n  apiKey?: string;\n}\n\nexport async function checkPhishingUrl(\n  prevState: FormState,\n  formData: FormData\n): Promise<FormState> {\n  try {\n    const validatedFields = formSchema.safeParse({\n      url: formData.get('url'),\n      apiKey: formData.get('apiKey'),\n    });\n\n    if (!validatedFields.success) {\n      return {\n        success: false,\n        error: validatedFields.error.errors.map((e) => e.message).join(', '),\n      };\n    }\n\n    const { url, apiKey } = validatedFields.data;\n\n    // Here you would typically validate the API key against a database\n    // For this example, we'll just check if it's not empty.\n\n    const result = await phishingUrlDetector({ url });\n\n    return { \n      success: true,\n      result,\n      url,\n      apiKey\n    };\n\n  } catch (e) {\n    const errorMessage = e instanceof Error ? e.message : 'An unexpected error occurred.';\n    return { \n      success: false,\n      error: `Analysis failed: ${errorMessage}` \n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,MAAM,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,KAAK,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACZ,gBAAgB;IAClB,GAAG,GAAG,CAAC;IACP,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC5B;AAWO,eAAe,iBACpB,SAAoB,EACpB,QAAkB;IAElB,IAAI;QACF,MAAM,kBAAkB,WAAW,SAAS,CAAC;YAC3C,KAAK,SAAS,GAAG,CAAC;YAClB,QAAQ,SAAS,GAAG,CAAC;QACvB;QAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;YAC5B,OAAO;gBACL,SAAS;gBACT,OAAO,gBAAgB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAM,EAAE,OAAO,EAAE,IAAI,CAAC;YACjE;QACF;QAEA,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,gBAAgB,IAAI;QAE5C,mEAAmE;QACnE,wDAAwD;QAExD,MAAM,SAAS,MAAM,CAAA,GAAA,iJAAA,CAAA,sBAAmB,AAAD,EAAE;YAAE;QAAI;QAE/C,OAAO;YACL,SAAS;YACT;YACA;YACA;QACF;IAEF,EAAE,OAAO,GAAG;QACV,MAAM,eAAe,aAAa,QAAQ,EAAE,OAAO,GAAG;QACtD,OAAO;YACL,SAAS;YACT,OAAO,CAAC,iBAAiB,EAAE,cAAc;QAC3C;IACF;AACF;;;IAtCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {checkPhishingUrl as '609acf6d496a603f6a057f6b646c3e85df14334e29'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx <module evaluation>\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,4DACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,4DACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,4DACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,4DACA","debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/tabs.tsx\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,wCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wCACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,wCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wCACA","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/detector.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/detector.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/detector.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/detector.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/detector.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/detector.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/accordion.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Accordion = registerClientReference(\n    function() { throw new Error(\"Attempted to call Accordion() from the server but Accordion is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx <module evaluation>\",\n    \"Accordion\",\n);\nexport const AccordionContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionContent() from the server but AccordionContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx <module evaluation>\",\n    \"AccordionContent\",\n);\nexport const AccordionItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionItem() from the server but AccordionItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx <module evaluation>\",\n    \"AccordionItem\",\n);\nexport const AccordionTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionTrigger() from the server but AccordionTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx <module evaluation>\",\n    \"AccordionTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,iEACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,iEACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,iEACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,iEACA","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/accordion.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Accordion = registerClientReference(\n    function() { throw new Error(\"Attempted to call Accordion() from the server but Accordion is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx\",\n    \"Accordion\",\n);\nexport const AccordionContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionContent() from the server but AccordionContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx\",\n    \"AccordionContent\",\n);\nexport const AccordionItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionItem() from the server but AccordionItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx\",\n    \"AccordionItem\",\n);\nexport const AccordionTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call AccordionTrigger() from the server but AccordionTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/accordion.tsx\",\n    \"AccordionTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,6CACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,6CACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,6CACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,6CACA","debugId":null}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 641, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/api-docs.tsx"],"sourcesContent":["import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Code, GitBranch, HeartPulse, Server } from \"lucide-react\"\n\nconst CodeBlock = ({ children }: { children: string }) => (\n  <pre className=\"mt-2 rounded-md bg-muted p-4 overflow-x-auto\">\n    <code className=\"text-sm text-muted-foreground\">{children}</code>\n  </pre>\n)\n\nexport default function ApiDocs() {\n  const healthResponse = `{\n  \"status\": \"healthy\",\n  \"timestamp\": \"${new Date().toISOString()}\"\n}`\n\n  const versionResponse = `{\n  \"version\": \"1.0.0\"\n}`\n\n  const detectRequest = `{\n  \"url\": \"http://example-phishing-site.com\"\n}`\n\n  const detectResponse = `{\n  \"prediction\": \"phishing\",\n  \"confidenceScore\": 0.95,\n  \"reasoning\": \"The URL uses a suspicious domain name that mimics a popular brand and has characteristics commonly found in phishing sites.\"\n}`\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Code className=\"w-6 h-6\" />\n          API Documentation\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"default\" className=\"bg-blue-600\">POST</Badge>\n                <span className=\"font-mono\">/api/detect</span>\n                <span>Detect Phishing URL</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>Analyzes a given URL and returns a prediction on whether it is a phishing attempt.</p>\n              <div>\n                <h4 className=\"font-semibold\">Headers</h4>\n                <p className=\"text-sm text-muted-foreground\"><code>api-key: YOUR_API_KEY</code> - Your unique API key for authentication.</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold\">Request Body</h4>\n                <CodeBlock>{detectRequest}</CodeBlock>\n              </div>\n              <div>\n                <h4 className=\"font-semibold\">Success Response (200 OK)</h4>\n                <CodeBlock>{detectResponse}</CodeBlock>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"default\" className=\"bg-green-600\">GET</Badge>\n                <span className=\"font-mono\">/health</span>\n                <span>Health Check</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>Returns the health status of the API. Useful for monitoring and load balancers.</p>\n              <div>\n                <h4 className=\"font-semibold\">Success Response (200 OK)</h4>\n                <CodeBlock>{healthResponse}</CodeBlock>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-3\">\n            <AccordionTrigger>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"default\" className=\"bg-gray-600\">GET</Badge>\n                <span className=\"font-mono\">/version</span>\n                <span>API Version</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>Returns the current version of the deployed API.</p>\n              <div>\n                <h4 className=\"font-semibold\">Success Response (200 OK)</h4>\n                <CodeBlock>{versionResponse}</CodeBlock>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </CardContent>\n    </Card>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAMA;AACA;AACA;;;;;;AAEA,MAAM,YAAY,CAAC,EAAE,QAAQ,EAAwB,iBACnD,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAK,WAAU;sBAAiC;;;;;;;;;;;AAItC,SAAS;IACtB,MAAM,iBAAiB,CAAC;;gBAEV,EAAE,IAAI,OAAO,WAAW,GAAG;CAC1C,CAAC;IAEA,MAAM,kBAAkB,CAAC;;CAE1B,CAAC;IAEA,MAAM,gBAAgB,CAAC;;CAExB,CAAC;IAEA,MAAM,iBAAiB,CAAC;;;;CAIzB,CAAC;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;;0BACH,8OAAC,gIAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,8OAAC,kMAAA,CAAA,OAAI;4BAAC,WAAU;;;;;;wBAAY;;;;;;;;;;;;0BAIhC,8OAAC,gIAAA,CAAA,cAAW;0BACV,cAAA,8OAAC,qIAAA,CAAA,YAAS;oBAAC,MAAK;oBAAS,WAAW;oBAAC,WAAU;;sCAC7C,8OAAC,qIAAA,CAAA,gBAAa;4BAAC,OAAM;;8CACnB,8OAAC,qIAAA,CAAA,mBAAgB;8CACf,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAU,WAAU;0DAAc;;;;;;0DACjD,8OAAC;gDAAK,WAAU;0DAAY;;;;;;0DAC5B,8OAAC;0DAAK;;;;;;;;;;;;;;;;;8CAGV,8OAAC,qIAAA,CAAA,mBAAgB;oCAAC,WAAU;;sDAC1B,8OAAC;sDAAE;;;;;;sDACH,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DAAgB;;;;;;8DAC9B,8OAAC;oDAAE,WAAU;;sEAAgC,8OAAC;sEAAK;;;;;;wDAA4B;;;;;;;;;;;;;sDAEjF,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DAAgB;;;;;;8DAC9B,8OAAC;8DAAW;;;;;;;;;;;;sDAEd,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DAAgB;;;;;;8DAC9B,8OAAC;8DAAW;;;;;;;;;;;;;;;;;;;;;;;;sCAIlB,8OAAC,qIAAA,CAAA,gBAAa;4BAAC,OAAM;;8CACnB,8OAAC,qIAAA,CAAA,mBAAgB;8CACf,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAU,WAAU;0DAAe;;;;;;0DAClD,8OAAC;gDAAK,WAAU;0DAAY;;;;;;0DAC5B,8OAAC;0DAAK;;;;;;;;;;;;;;;;;8CAGV,8OAAC,qIAAA,CAAA,mBAAgB;oCAAC,WAAU;;sDAC1B,8OAAC;sDAAE;;;;;;sDACH,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DAAgB;;;;;;8DAC9B,8OAAC;8DAAW;;;;;;;;;;;;;;;;;;;;;;;;sCAIlB,8OAAC,qIAAA,CAAA,gBAAa;4BAAC,OAAM;;8CACnB,8OAAC,qIAAA,CAAA,mBAAgB;8CACf,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAU,WAAU;0DAAc;;;;;;0DACjD,8OAAC;gDAAK,WAAU;0DAAY;;;;;;0DAC5B,8OAAC;0DAAK;;;;;;;;;;;;;;;;;8CAGV,8OAAC,qIAAA,CAAA,mBAAgB;oCAAC,WAAU;;sDAC1B,8OAAC;sDAAE;;;;;;sDACH,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DAAgB;;;;;;8DAC9B,8OAAC;8DAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ5B","debugId":null}},
    {"offset": {"line": 1196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/health.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/health.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/health.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 1210, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/health.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/health.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/health.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 1224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1234, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/version.tsx"],"sourcesContent":["import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { GitBranch } from \"lucide-react\";\n\nexport default function Version() {\n  const apiVersion = \"1.0.0\";\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <GitBranch className=\"w-6 h-6 text-primary\" />\n          API Version\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-4xl font-bold font-mono text-primary\">{apiVersion}</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          This is the current version of the PhishNet API.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACtB,MAAM,aAAa;IAEnB,qBACE,8OAAC,gIAAA,CAAA,OAAI;;0BACH,8OAAC,gIAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,8OAAC,gNAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;wBAAyB;;;;;;;;;;;;0BAIlD,8OAAC,gIAAA,CAAA,cAAW;;kCACV,8OAAC;wBAAE,WAAU;kCAA6C;;;;;;kCAC1D,8OAAC;wBAAE,WAAU;kCAAqC;;;;;;;;;;;;;;;;;;AAM1D","debugId":null}},
    {"offset": {"line": 1307, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ShieldCheck } from \"lucide-react\"\nimport Detector from \"@/components/detector\"\nimport ApiDocs from \"@/components/api-docs\"\nimport Health from \"@/components/health\"\nimport Version from \"@/components/version\"\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-4 sm:p-8 md:p-12 bg-background font-body\">\n      <div className=\"w-full max-w-4xl mx-auto\">\n        <header className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-primary font-headline flex items-center justify-center gap-3\">\n            <ShieldCheck className=\"h-10 w-10\" />\n            PhishNet API\n          </h1>\n          <p className=\"text-muted-foreground mt-2 text-lg\">\n            Advanced Phishing URL Detection Service\n          </p>\n        </header>\n\n        <Tabs defaultValue=\"detector\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 h-auto\">\n            <TabsTrigger value=\"detector\">Detector</TabsTrigger>\n            <TabsTrigger value=\"docs\">API Docs</TabsTrigger>\n            <TabsTrigger value=\"health\">Health</TabsTrigger>\n            <TabsTrigger value=\"version\">Version</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"detector\" className=\"mt-6\">\n            <Detector />\n          </TabsContent>\n          <TabsContent value=\"docs\" className=\"mt-6\">\n            <ApiDocs />\n          </TabsContent>\n          <TabsContent value=\"health\" className=\"mt-6\">\n            <Health />\n          </TabsContent>\n          <TabsContent value=\"version\" className=\"mt-6\">\n            <Version />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAO,WAAU;;sCAChB,8OAAC;4BAAG,WAAU;;8CACZ,8OAAC,oNAAA,CAAA,cAAW;oCAAC,WAAU;;;;;;gCAAc;;;;;;;sCAGvC,8OAAC;4BAAE,WAAU;sCAAqC;;;;;;;;;;;;8BAKpD,8OAAC,gIAAA,CAAA,OAAI;oBAAC,cAAa;oBAAW,WAAU;;sCACtC,8OAAC,gIAAA,CAAA,WAAQ;4BAAC,WAAU;;8CAClB,8OAAC,gIAAA,CAAA,cAAW;oCAAC,OAAM;8CAAW;;;;;;8CAC9B,8OAAC,gIAAA,CAAA,cAAW;oCAAC,OAAM;8CAAO;;;;;;8CAC1B,8OAAC,gIAAA,CAAA,cAAW;oCAAC,OAAM;8CAAS;;;;;;8CAC5B,8OAAC,gIAAA,CAAA,cAAW;oCAAC,OAAM;8CAAU;;;;;;;;;;;;sCAE/B,8OAAC,gIAAA,CAAA,cAAW;4BAAC,OAAM;4BAAW,WAAU;sCACtC,cAAA,8OAAC,8HAAA,CAAA,UAAQ;;;;;;;;;;sCAEX,8OAAC,gIAAA,CAAA,cAAW;4BAAC,OAAM;4BAAO,WAAU;sCAClC,cAAA,8OAAC,iIAAA,CAAA,UAAO;;;;;;;;;;sCAEV,8OAAC,gIAAA,CAAA,cAAW;4BAAC,OAAM;4BAAS,WAAU;sCACpC,cAAA,8OAAC,4HAAA,CAAA,UAAM;;;;;;;;;;sCAET,8OAAC,gIAAA,CAAA,cAAW;4BAAC,OAAM;4BAAU,WAAU;sCACrC,cAAA,8OAAC,6HAAA,CAAA,UAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMpB","debugId":null}}]
}